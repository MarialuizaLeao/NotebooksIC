{"cells":[{"cell_type":"markdown","metadata":{"id":"0uelWaZFqTyx"},"source":["### Problemas Clássicos de Machine Learning \n","\n","Antes de falarmos de Deep Learning, precisamos antes masterizar algumas técnicas clássicas, antecessoras ao aprendizado profundo.\n","\n","De maneira simplória, podemos dividir os problemas clássicos em três:\n","\n","* Regressão: queremos prever um output baseado nos inputs.\n","* Clusterização: queremos agrupar os dados.\n","* Classificação: queremos classificar os dados.\n","\n","Regressão e classificação são problemas de aprendizado supervisionado, isto é, devemos ter o valor verdadeiro para comparar com nossa predição.\n","Por exemplo, se o output do nosso algoritmo for 3 e o ground truth for 3.1, por exemplo, temos uma maneira de comparar o valor obtido com o valor esperado.\n","A mesma coisa para classificação, se recebemos uma imagem de gatinho, mas nosso algoritmo classifica a imagem como cachorro, temos como comparar esses valores. \n","Esse valor de ground truth é chamado de rótulo (ou label).\n","\n","Clusterização é um problema de aprendizado não-supervisionado. Quando recebemos os dados, não sabemos qual ponto pertence a qual grupo, e muitas vezes não sabemos nem quantos grupos temos. Este tipo de aprendizado é um substancialmente diferente do supervisionado e, consequentemente, tem métodos diferentes.\n","\n","Neste notebook abordaremos o problema de regressão linear, que capta o cerne do machine learning."]},{"cell_type":"markdown","metadata":{"id":"z_DsfuUJqTy2"},"source":["### Regressão Linear\n","\n","<img src=\"https://drive.google.com/uc?export=view&id=1J3ZkEKVcDON86jWggVTqGNzGnzud4mB6\" width=\"65%\"/>\n","\n","Na imagem, fica claro que não existe uma reta \"perfeita\" que se ajusta a todos os pontos. Existem diversas maneiras de computar esse erro, contudo o método mais usado é o método de mínimos quadrados, que busca minimizar a distância entre a reta e esses pontos:\n","\n","$$\n","\\text{Error} = \\sum_{i=1}^n (y_i-f(x_i))^2\n","$$\n","Fazemos a somatória pois queremos o erro acumulado, isto é, o erro da reta com relação a todos os pontos. Além disso, tomamos o quadrado pois a diferença $y_i-f(x_i)$ pode ser positiva ou negativa. \n","\n","Neste caso, como temos apenas uma variável independente, $x$, podemos escrever $f(x) = a_0 + a_1x$:\n","\n","$$\n","\\text{Error} = \\sum_{i=1}^n (y_i-a_0 - a_1x)^2\n","$$\n","\n","Minimizar este erro é, portanto, achar a melhor reta para os nossos dados. Veremos mais pra frente, mas **minimizar** significa **derivar**, pois como sabemos, o mínimo (ou o máximo) de uma função se dá quando sua primeira derivada é igual a 0. \n","\n","No nosso caso:\n","\n","\n","$$\n","\\nabla E_c(a_0,a_1) = \\left(\\frac{\\partial E_c}{\\partial a_0},\\frac{\\partial E_c}{\\partial a_1}\\right) = (0,0)\n","$$\n","\n","Desenvolvendo:\n","\n","\n","$$\n","\\begin{bmatrix} (n) & \\sum x_i \\\\ \\sum x_i & \\sum x_i^2 \\end{bmatrix}\\begin{bmatrix} a_0 \\\\ a_1 \\end{bmatrix} = \\begin{bmatrix} \\sum y_i \\\\ \\sum x_i y_i \\end{bmatrix},\n","$$\n","\n","\n","Finalmente: \n","\n","$$\n","\\begin{equation}\n","    \\begin{bmatrix}a_0 \\\\ a_1 \\end{bmatrix} = \n","        \\begin{bmatrix} \n","        \\frac{\\sum y_i \\sum x_i^2 - \\sum x_i \\sum x_i y_i}\n","        {n \\sum x_i^2 - \\left(\\sum x_i \\right)^2} \\\\ \n","        \\frac{n \\sum x_i y_i - \\sum x_i \\sum y_i}\n","        {n \\sum x_i^2 - \\left(\\sum x_i \\right)^2} \n","    \\end{bmatrix}\n","\\end{equation}\n","$$\n","\n","</br>\n","</br>\n","\n","#### Esse Error é muitas vezes chamado de função de perda, ou loss function $\\mathcal{L}$. A loss vai definir **como** o computador aprenderá. Veremos mais para frente, em programação diferenciável, que nossos coeficientes (ou pesos, no caso de uma rede neural) serão atualizados baseados nessa função de perda.\n","</br>\n","\n","Assim, entender o que ela representa é fundamental para entender como nosso algoritmo funciona.\n","\n","</br>\n","\n","\n","#### Coeficiente de correlação\n","\n","Para estimarmos a qualidade do ajuste realizado, podemos calcular o coeficiente de determinação $R^2$. Para tal, precisamos da soma do quadrado dos resíduais, \n","\n","$$\n","SS_{\\rm res} = \\sum (y_i - f(x_i))^2 \n","$$\n","\n","e a soma total dos quadrados,\n","\n","$$\n","SS_{\\rm tot} = \\sum (y_i - \\overline{y})^2,\n","$$\n","\n","\n","onde $\\overline{y}$ é a media dos valores medidos:\n","\n","$$\n","\\overline{y} = \\frac{\\sum y_i}{n} \n","$$\n","\n","\n","O coeficiente de determinação é então definido como:\n","\n","$$\n","  R^2 = 1 - \\frac{SS_{\\rm res}}{SS_{\\rm tot}}\n","$$\n","\n","No melhor dos casos $SS_{\\rm res}=0$, logo $R^2 = 1$.  Um modelo que apenas prevê a média, $\\overline{y}$,  terá $R^2 = 0$. \n","\n","</br>\n","</br>\n","\n","Mais para frente, quando estivermos usando pytorch, faremos uma regressão linear from scratch. Por enquanto, podemos simplesmente importar alguma biblioteca que faz isso ou codar a equação na mão, haja vista que tal equação apenas faz somas e multiplicações nos nossos dados.\n"]},{"cell_type":"markdown","metadata":{"id":"5iIqKMzEqTy8"},"source":["A ideia de uma regressão linear pode ser generalizada para n dimensões. Neste caso, temos uma regressão linear múltipla. \n","$f(x)$ vira $f(x_1,x_2,x_3...)$ e buscamos determinar o hiperplano que minimiza as distâncias ao nossos pontos $f(x_1,x_2,x_3...) = a_0 + a_1x_1 + a_2x_2 + a_3x_3 \\text{...}$\n","\n","Mas isso é assunto para outra hora."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"wziRoat_qTy4","executionInfo":{"status":"ok","timestamp":1683597469640,"user_tz":180,"elapsed":1186,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}}},"outputs":[],"source":["## Gerando os dados\n","import numpy as np \n","\n","np.random.seed(0)\n","\"\"\" como geraremos um erro aleatório, precisamos de fixar o seed, isto é, fixar o seed para que a geração \n","de números pseudo-aleatórios seja o mesmo,  se não, cada vez que o random, temos um valor diferente. \"\"\"\n","\n","\n","\n","x = np.linspace(1,10, 32)\n","normal_error = np.random.normal(scale = 2, size = 32) ## adicionando um erro normal ao nossos dados, para que não fique muito óbvio a relação.\n","y = 3*x + 2 + normal_error\n","\n","dados = np.vstack([x,y]).T ## assim, temos uma lista contendo os pares [[x1,y1],[x2,y2]...] que as vezes, por questão de conveniência, é mais fácil de trabalhar..."]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"c7ZGIIixqTy6","executionInfo":{"status":"ok","timestamp":1683597469642,"user_tz":180,"elapsed":23,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"8446e163-b59a-498f-8211-9856751de52d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7fcbc4171a20>"]},"metadata":{},"execution_count":2},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","\n","fig, ax = plt.subplots()\n","ax.scatter(x,y)"]},{"cell_type":"code","source":["def sums(dados: list) -> list:\n","    [X,Y,XX,YY,XY] = [0.0,0.0,0.0,0.0,0.0]\n","    for p in dados:\n","        X += p[0]\n","        Y += p[1]\n","        XX += pow(p[0],2.0)\n","        YY += pow(p[1],2.0)\n","        XY += p[0]*p[1]\n","    return [X,Y,XX,YY,XY]\n","\n","## Essa função basicamente calcula os valores dos somatórios presentes na equação. como estamos trabalhando com numpy arrays, poderíamos facilmente fazer\n","## X = np.sum(x), Y=np.sum(y), XX = np.sum(x*x), YY = np.sum(y*y), XY = np.sum(x*y), que provavelmente deve ser mais eficiente... mas, às vezes, é bom codar na mão essas funções."],"metadata":{"id":"MWe3Hj-Jqurp","executionInfo":{"status":"ok","timestamp":1683597469644,"user_tz":180,"elapsed":21,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["sums(dados), [np.sum(x), np.sum(y), np.sum(x*x), np.sum(y*y), np.sum(x*y)] ## Por questão de precisão de ponto flutuante, essas duas listas não são exatamente iguais... mas ela são iguais, rs."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0ln8fHJvtX-W","executionInfo":{"status":"ok","timestamp":1683597469645,"user_tz":180,"elapsed":20,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"a1e13218-eb78-422a-859e-43e06ac308cc"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([176.00000000000003,\n","  619.6376067263888,\n","  1197.935483870968,\n","  13982.012762607981,\n","  4060.039197291084],\n"," [176.0,\n","  619.6376067263888,\n","  1197.9354838709678,\n","  13982.012762607983,\n","  4060.039197291084])"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["def linear_lsf(dados: list) -> tuple:\n","    [X,Y,XX,YY,XY] = sums(dados)\n","    m = len(dados)\n","    a0 = (Y*XX-X*XY)/(m*XX-X*X)\n","    a1 = (m*XY-X*Y)/(m*XX-X*X)    \n","    return a0,a1 \n","\n","def linear_f(x):\n","    a0, a1 = linear_lsf(dados)\n","    return a0+a1*x\n","\n","\n","def R2(dados):\n","    SSr = 0.\n","    SSt = 0.\n","    [X,Y,XX,YY,XY] = sums(dados)\n","    m = len(dados)\n","    ymean = Y/m\n","    a0, a1 = linear_lsf(dados)\n","    for p in dados:\n","        SSr += (p[1] - (a0+a1*p[0]))**2\n","        SSt += (p[1] - ymean)**2\n","    return 1.-SSr/SSt"],"metadata":{"id":"_hVBV3eBqu9h","executionInfo":{"status":"ok","timestamp":1683597469645,"user_tz":180,"elapsed":17,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["a0, a1 = linear_lsf(dados)\n","r2  = R2(dados)\n","a1, a0, r2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QAl1SriTqvB7","executionInfo":{"status":"ok","timestamp":1683597469647,"user_tz":180,"elapsed":18,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"cd498471-309f-4609-bf7b-14311dc2b6eb"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2.8357187386608174, 3.767222147565168, 0.9321565270410618)"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["### Podemos fazer a regressão utilizando bibliotecas"],"metadata":{"id":"NKYW6-MdQGD7"}},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SeDMCYJ_qTy7","executionInfo":{"status":"ok","timestamp":1683597470350,"user_tz":180,"elapsed":719,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"70cc2d71-b129-4645-d038-43acbb9bf9f8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinregressResult(slope=2.835718738660819, intercept=3.7672221475651426, rvalue=0.9654825358550311, pvalue=4.432564256086792e-19, stderr=0.13967289636250615, intercept_stderr=0.8545822430420675)"]},"metadata":{},"execution_count":7}],"source":["from scipy.stats import linregress\n","\n","coefs = linregress(x,y)\n","coefs"]},{"cell_type":"code","source":["print(f'Slope da biblioteca: {coefs.slope:.7f} vs Slope do código: {a1:.7f}')\n","print(f'Intercept da biblioteca: {coefs.intercept:.7f} vs Intercept do código: {a0:.7f}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mAaYtFxWrDe6","executionInfo":{"status":"ok","timestamp":1683597470351,"user_tz":180,"elapsed":12,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"4cfd79ad-4953-48c6-cba8-f1d01165447b"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Slope da biblioteca: 2.8357187 vs Slope do código: 2.8357187\n","Intercept da biblioteca: 3.7672221 vs Intercept do código: 3.7672221\n"]}]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":448},"id":"Y5PtpZXGqTy8","executionInfo":{"status":"ok","timestamp":1683597470351,"user_tz":180,"elapsed":10,"user":{"displayName":"João Pedro Pires Thomaz","userId":"15712926871428836171"}},"outputId":"a89aba08-060d-462e-c9d7-0624308367ed"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fcb97b094b0>]"]},"metadata":{},"execution_count":9},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import matplotlib.pyplot as plt\n","\n","\n","fig, ax = plt.subplots()\n","ax.scatter(x,y)\n","ax.plot(x, coefs.slope*x + coefs.intercept, color = 'k', lw = 2)"]},{"cell_type":"markdown","source":["### A regressão linear captura o cerne do Machine Learning:\n","\n","Definimos uma função de perda $\\mathcal{L}$ que nos dirá quão bom está nosso ajuste aos dados.\n","Precisamos, posteriormente, derivar tal função, para acharmos o ponto de mínimo, isto é, derivamos para minimizar essa função.\n","O resultado final consiste na solução ótima para o nosso problema; consiste nos parâmetros que melhor se ajustam aos nossos dados.\n","\n","</br>\n","\n","No caso da regressão linear, pudemos fazer essa derivada na mão, haja vista que a loss foi de mínimo quadrados em uma função linear:\n","\n","$$\n"," \\mathcal{L}  = \\sum_{i=1}^n (y_i - f(x_i))^2\n","$$\n","\n","Utilizamos $f(x_i)$ como sendo uma função afim, pois esse tipo de função captura o comportamento dos nosso dados. \n","\n","Agora, imagine, que o comportamento dos nossos dados não seja um comportamento tão simples quanto uma reta. Imagine também que o $f(x_i)$  não seja um função analítica. Derivar essa função na mão é extremamente custoso e difícil. Quando $f(x_i)$ não é diferenciável, não existe nem solução analítica para tal problema.\n","\n","Sendo assim, precisamos de um outro método para obter as derivadas da nossa função. O nome deste método é **SGD**, ou método estócastico da descida do gradiente. SGD é mais eficiente do que calcular as derivadas analíticamente, além de poder ser utilizado quando $f(x_i)$ é não linear ou não analítico..."],"metadata":{"id":"xf0X7UsHRNiN"}}],"metadata":{"kernelspec":{"display_name":"base","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.13"},"orig_nbformat":4,"colab":{"provenance":[]}},"nbformat":4,"nbformat_minor":0}